{"version":3,"sources":["auth/user.js","auth/inputfield.js","auth/submitbutton.js","auth/loginprocess.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","inputField","className","type","props","placeholder","value","onChange","e","target","React","Component","submitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","User","resetForm","alert","msg","console","log","setInputValue","doLogin","App","observer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27c87aa4.chunk.js","sourcesContent":["import { extendObservable} from 'mobx';\r\n\r\nclass User {\r\n    constructor(){\r\n        extendObservable(this, {\r\n            loading : true,\r\n            isLoggedIn : false,\r\n            username : ''\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport default new User();","import React from 'react';\r\n\r\nclass inputField extends React.Component {\r\n\r\nrender(){\r\n    return (\r\n        <div className=\"inputField\">\r\n\r\n                <input \r\n                className='input'\r\n                type={this.props.type}\r\n                placeholder={this.props.placeholder}\r\n                value={this.props.value}\r\n                onChange={ (e) => this.props.onChange(e.target.value)}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n}\r\n\r\nexport default inputField;","import React from 'react';\r\n\r\nclass submitButton extends React.Component {\r\n\r\nrender(){\r\n    return (\r\n        <div className=\"submitButton\">\r\n            <button \r\n            className='btn'\r\n            disabled={this.props.disabled}\r\n            onClick={ () => this.props.onClick()}\r\n            >\r\n                {this.props.text}\r\n            </button>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n}\r\n\r\nexport default submitButton;","import React from \"react\";\r\nimport User from './user';\r\nimport InputField from './inputfield';\r\nimport SubmitButton from './submitbutton';\r\n\r\n\r\n// import LoginComponent from 'auth/login.component';\r\n\r\nclass LoginForm extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            buttonDisabled: false\r\n        }\r\n    }\r\n    setInputValue(property, val){\r\n        val = val.trim();\r\n        if(val.length > 12){\r\n            return;\r\n        }\r\n        this.setState({\r\n            [property]:val\r\n        })\r\n    }\r\n\r\n\r\n\r\n    resetForm(){\r\n        this.setState({\r\n            username: '',\r\n            password: '',\r\n            buttonDisabled: false\r\n        })\r\n    }\r\n    async doLogin(){\r\n        if(!this.state.username){\r\n          return;  \r\n        }\r\n        if(!this.state.password){\r\n            return;  \r\n          }\r\n          this.setState({\r\n              buttonDisabled:true\r\n            })\r\n         \r\n            try {\r\n                let res =await fetch('https://7b305984fdba6467fab1938a5e30578b.m.pipedream.net/',{\r\n                    method:'post',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        username: this.state.username,\r\n                        password: this.state.password\r\n                    })\r\n                });\r\n\r\n                let result = await res.json();\r\n                if(result && result.success){\r\n                    User.isLoggedIn = true;\r\n                    User.username = result.username;\r\n                }\r\n                else if (result && result.success === false){\r\n                    this.resetForm();\r\n                    alert(result.msg);\r\n                }\r\n\r\n\r\n            }\r\n            catch(e){\r\n                console.log(e);\r\n                this.resetForm();\r\n            }\r\n    }\r\n    \r\n\r\n    async doLogout(){\r\n        if(!this.state.username){\r\n          return;  \r\n        }\r\n        if(!this.state.password){\r\n            return;  \r\n          }\r\n          this.setState({\r\n              buttonDisabled:false\r\n            })\r\n\r\n            try {\r\n                let res =await fetch('/logout',{\r\n                    method:'post',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-type': 'application/json'\r\n                    }\r\n                });\r\n\r\n                let result = await res.json();\r\n                if(result && result.success){\r\n                    User.isLoggedIn = false;\r\n                    User.username = result.username;\r\n                   \r\n                }\r\n                else if (result && result.success === false){\r\n                    this.resetForm();\r\n                    alert(result.msg);\r\n                }\r\n\r\n\r\n            }\r\n            catch(e){\r\n                console.log(e);\r\n                this.resetForm();\r\n            }\r\n    }\r\n    render() {\r\n        return (\r\n           <div className=\"loginForm\">\r\n                 <InputField \r\n                    type='text' \r\n                    // className='form-control' \r\n                    placeholder='Enter username'\r\n                    value={this.state.username ? this.state.username: '' }\r\n                    onChange={ (val) => this.setInputValue('username', val) }\r\n                />\r\n\r\n                    <InputField \r\n                    type='password' \r\n                    // className='form-control' \r\n                    placeholder='Enter password'\r\n                    value={this.state.password ? this.state.password: '' }\r\n                    onChange={ (val) => this.setInputValue('password', val) }\r\n                />\r\n\r\n\r\n             \r\n\r\n                <SubmitButton \r\n                text='login' \r\n                disabled={this.state.buttonDisabled}\r\n                onClick={ ()=> this.doLogin() } \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// console.log(this.username);\r\nexport default LoginForm;","import React, { Component } from 'react'; \nimport User from './auth/user';\nimport {observer} from 'mobx-react';\nimport LoginProcess from './auth/loginprocess';\n// import Header from './Component/body';\n\n\nclass App extends Component {\n  async componentDidMount(){\n\n    try {\n      let res = await fetch ('/isLoggedIn', {\n        method : 'post',\n        headers : {\n          'Accept' : 'apllication/json',\n          'Content-type' : 'application/json'\n        }\n      });\n\n      let result = await res.json();\n\n      if(result && result.success){\n        User.loading = false;\n        User.isLoggedIn = false;\n        User.username = result.username;\n\n        \n      }else{\n        User.loading = false;\n        User.isLoggedIn = true;\n        // User.username = result.username;\n      }\n\n    }\n    catch (e){\n     console.log(e);\n      \n    }\n  } \n\n\n  render(){\n    if(User.loading){\n      return(\n        <LoginProcess/>\n      );\n    }else{\n\n      if(User.isLoggedIn){\n        return(\n\n        <h1>hello word</h1>\n\n        ); \n\n      }\n     \n    }\n\n   \n  }\n}\n\n// console.log(constructor.json());\nexport default observer(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}